计算16位校验和与实例计算

查考文档:

IP、ICMP、UDP、TCP 校验和算法

http://blog.csdn.net/li_xiang1102/article/details/6901660

 

运算符与表达式

http://woodpecker.org.cn/abyteofpython_cn/chinese/ch05s02.html

 

python中按位翻转

http://zhidao.baidu.com/question/397189839.html

 

 

#! /usr/bin/python

 

import os

import argparse

import socket

import struct

import select

import time

 

ICMP_ECHO_REQUEST = 8

DEFAULT_TIMEOUT = 2

DEFAULT_COUNT = 4

 

class Pinger(object):

        def __init__(self, target_host, count=DEFAULT_COUNT, timeout=DEFAULT_TIMEOUT):

                  self.target_host = target_host

                  self.count = count

                  self.timeout = timeout

 

        def do_checksum(self, source_string): #计算校验和的方法，传入一个字串

                  #假设需要传输的source_string = 'abc'

                  sum = 0

                  max_count = (len(source_string)//2) * 2

                  # (3//2) * 2 = 2,注意‘//’是整除，因为是16位（两个字节）校验和，一个字母一个字节。

                  count = 0

                  while count < max_count:

                           val = ord(source_string[count + 1]) * 256 + ord(source_string[count])

                           #ord(source_string[0]) = 97(01100001) #其实就是算‘a’

                           #ord(source_string[1]) = 98(01100010) #其实就是算‘b’

                           #val = ord(source_string[1])*256 + ord(source_string[0])

                           #val = 0110001001100001

                           sum = sum + val

                           #sum = 0110001001100001

                           sum = sum & 0xffffffff

                           #sum = 0000000000000000 0110001001100001

                           #sum = sum & 0xffffffff

                           #0000000000000000 0110001001100001 & 1111111111111111 1111111111111111

                           #sum = 0000000000000000 0110001001100001

                           count = count + 2

 

                  if max_count < len(source_string):

                           sum = sum + ord(source_string[len(source_string) - 1])

                           #sum = 0000000000000000 0110001001100001

                           #ord(source_string[2]) =0000000001100011 #其实就是算‘c’

                           #sum = 0000000000000000 0110001011000100

                           sum = sum & 0xffffffff

                           #sum = 0000000000000000 0110001011000100

 

                  sum = (sum >> 16) + (sum & 0xffff)

                  #超过16位的高位加到低位，请参考文章‘IP、ICMP、UDP、TCP 校验和算法’，由于我的值未超过16位，所以省略此操作。

                  sum = sum + (sum >> 16)

                  #超过16位的高位加到低位，请参考文章‘IP、ICMP、UDP、TCP 校验和算法’ 由于我的值未超过16位，所以省略此操作。

 

                  answer = ~sum

                  #按位求反，或者说按位翻转。请参考文章‘python中按位翻转是什么意思 公式是～x = -(x+1) 不明白’

                  #answer = 0000000000000000 0110001011000100求反的结果为1111111111111111 1001110100111011

                  #answer = 1111111111111111 1001110100111011

                  answer = answer & 0xffff

                  #answer = 1111111111111111 1001110100111011

                  #           0000000000000000 1111111111111111       

                  #answer = 0000000000000000 1001110110011110

                  answer = answer >> 8 | (answer << 8 & 0xff00)

                  #answer >> 8 = 0000000000000000 0000000010011101

 

                  #answer << 8 = 0000000010011101 1001111000000000

                  #0xff00       0000000000000000 1111111100000000

                  #             0000000000000000 1001111000000000

                  #0000000000000000 0000000010011101 | 0000000000000000 1001111000000000 计算结果如下

                  #0000000000000000 1001111010011101（说白了就是高位换到低位，低位换到高位，就是主机字节序换到网络字节序）

                  return answer
